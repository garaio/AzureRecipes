trigger:
- develop
- feature/*

variables:
  - group: Build
  - name: deploymentFolderName
    value: 'Customer.Project.Deployment'
  - name: frontendFolderName
    value: 'Customer.Project.Frontend'
  - name: resourceGroupName
    value: '$(resourceNamePrefix)-$(resourceNameSuffix)'
  - name: currentDate
    value: '$[format(''{0:yyyy}-{0:MM}-{0:dd}'', pipeline.startTime)]'

resources:
  containers:
  - container: linux
    image: ubuntu-16.04

stages:
- stage: backend
  displayName: 'Backend'
  dependsOn: []
  jobs:
    - job: build_test
      displayName: "Build & Test"
      pool:
        vimImage: "ubuntu-16.04"
      steps:
        - task: DotNetCoreCLI@2
          displayName: Restore
          inputs:
            command: restore
            projects: |
              **/*.csproj
              **/*.deployproj

        - task: DotNetCoreCLI@2
          displayName: Build
          inputs:
            projects: |
              **/*.csproj
              **/*.deployproj
            arguments: '--configuration $(buildConfiguration)'

        - task: DotNetCoreCLI@2
          displayName: 'Execute Tests'
          inputs:
            command: test
            projects: '**/*[Tt]ests/*.csproj'
            arguments: '--configuration $(buildConfiguration)'

        - task: DotNetCoreCLI@2
          displayName: Publish
          inputs:
            command: publish
            publishWebProjects: false
            projects: '**/*.csproj'
            arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)'
            zipAfterPublish: True

        - task: AzureCLI@2
          displayName: 'Create Resource Group'
          inputs:
            azureSubscription: '$(armServiceConnection)'
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az group create --location $(resourceLocation) --name $(resourceGroupName) --tags 'DeployedAt=$(currentDate)' 'DeployedBy=$(Build.RequestedFor)' 'DeployedFrom=$(System.TeamProject)'

        - task: AzureResourceManagerTemplateDeployment@3
          displayName: 'Validate ARM Template'
          inputs:
            azureResourceManagerConnection: '$(armServiceConnection)'
            subscriptionId: '$(subscriptionId)'
            resourceGroupName: '$(resourceGroupName)'
            location: '$(resourceLocation)'
            csmFile: '$(deploymentFolderName)/azuredeploy.json'
            csmParametersFile: '$(deploymentFolderName)/azuredeploy.parameters.json'
            overrideParameters: '-resourceNameSuffix "build"'
            deploymentMode: 'Validation'
          continueOnError: true

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact'
          inputs:
            PathtoPublish: '$(build.artifactstagingdirectory)'
          condition: succeededOrFailed()

- stage: frontend
  displayName: 'Frontend'
  dependsOn: []
  jobs:
    - job: build_test
      displayName: "Build & Test"
      pool:
        vimImage: "ubuntu-16.04"

      steps:
      - task: Npm@1
        displayName: 'Install Packages'
        inputs:
          command: ci
          workingDir: '$(frontendFolderName)'
          verbose: false

      - task: Npm@1
        displayName: Build
        inputs:
          command: custom
          workingDir: '$(frontendFolderName)'
          verbose: false
          customCommand: 'run build'

      - task: CopyFiles@2
        displayName: 'Copy Dist'
        inputs:
          SourceFolder: '$(frontendFolderName)/dist/$(frontendPackageName)'
          TargetFolder: '$(build.artifactstagingdirectory)/$(frontendFolderName)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          PathtoPublish: '$(build.artifactStagingDirectory)'
