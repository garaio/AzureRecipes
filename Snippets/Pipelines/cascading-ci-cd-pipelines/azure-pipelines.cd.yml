trigger: none

parameters:
  - name: suffix
    type: string
    default: 'd'

resources:
  pipelines:
  - pipeline: CI-Pipeline
    source: CI
    trigger: 
      branches:
      - develop
      - release/*

variables:
  - group: Release
  - name: projectNamePrefix
    value: 'Customer.Project.'
  - name: deploymentFolderName
    value: '$(projectNamePrefix)Deployment'
  - name: frontendFolderName
    value: '$(projectNamePrefix)Frontend'
  - name: resourceNameSuffix
    value: '${{ parameters.suffix }}'
  - name: resourceGroupName
    value: '$(resourceNamePrefix)-$(resourceNameSuffix)'
  - name: prefixUnhyphenated
    value: '$[replace(variables[''resourceNamePrefix''],''-'','''')]'
  - name: storageAccountName
    value: '$(prefixUnhyphenated)sa$(resourceNameSuffix)'
  - name: blobContainerFrontendDeployment
    value: '$web'
  - name: currentDate
    value: '$[format(''{0:yyyy}-{0:MM}-{0:dd}'', pipeline.startTime)]'

stages:
  - stage: deployDevEnvironment
    displayName: 'Deploy Dev Environment'
    dependsOn: []
    jobs:
      - deployment: deploy_backend
        displayName: 'Deploy Backend'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'DEV'
        variables:
          - name: ciArtifactName
            value: 'backend'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: 'Create Resource Group'
                  inputs:
                    azureSubscription: '$(armServiceConnection)'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az group create --location $(resourceLocation) --name $(resourceGroupName) --tags 'DeployedAt=$(currentDate)' 'DeployedBy=$(Build.RequestedFor)' 'DeployedFrom=$(System.TeamProject)'

                - task: AzureCLI@2
                  displayName: 'Create Storage Account for Artifact'
                  inputs:
                    azureSubscription: '$(armServiceConnection)'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az storage account create --name $(storageAccountName) --resource-group $(resourceGroupName)

                - task: AzureCLI@2
                  displayName: 'Create Storage Container'
                  inputs:
                    azureSubscription: '$(armServiceConnection)'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az storage container create --name $(blobContainerDeployment) --account-name $(storageAccountName) --resource-group $(resourceGroupName)

                - task: AzureCLI@2
                  displayName: 'Copying to Storage Container'
                  inputs:
                    azureSubscription: '$(armServiceConnection)'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az storage blob upload-batch -s $(Pipeline.Workspace)/CI-Pipeline/$(ciArtifactName) -d $(blobContainerDeployment) --account-name $(storageAccountName) --overwrite=true

                - task: AzureResourceManagerTemplateDeployment@3
                  displayName: 'Deploy ARM Template (ResourceGroup)'
                  inputs:
                    azureResourceManagerConnection: '$(armServiceConnection)'
                    subscriptionId: '$(subscriptionId)'
                    resourceGroupName: '$(resourceGroupName)'
                    location: '$(resourceLocation)'
                    csmFile: '$(Pipeline.Workspace)/CI-Pipeline/$(ciArtifactName)/$(deploymentFolderName)/azuredeploy.json'
                    csmParametersFile: '$(Pipeline.Workspace)/CI-Pipeline/$(ciArtifactName)/$(deploymentFolderName)/azuredeploy.parameters.json'
                    overrideParameters: '-resourceNamePrefix "$(resourceNamePrefix)" -resourceNameSuffix "$(resourceNameSuffix)" -serviceFuncKeySecret "$(serviceFuncKeySecret)"'
                    deploymentMode: 'Incremental'
                    deploymentName: 'Customer-Project-$(Build.BuildId)-$(Environment.Name)'

      - deployment: deploy_frontend
        dependsOn: deploy_backend
        displayName: 'Deploy Frontend'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'DEV'
        variables:
          - name: ciArtifactName
            value: 'frontend'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: 'Create Storage Container'
                  inputs:
                    azureSubscription: '$(armServiceConnection)'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az storage container create --name '$(blobContainerFrontendDeployment)' --account-name $(storageAccountName) --resource-group $(resourceGroupName)

                - task: FileTransform@1
                  displayName: 'Transforming configuration'
                  inputs:
                    folderPath: '$(Pipeline.Workspace)/CI-Pipeline/$(ciArtifactName)/$(frontendFolderName)/assets'
                    fileType: json
                    targetFiles: config.json

                - task: AzureCLI@2
                  displayName: 'Copying to Storage'
                  inputs:
                    azureSubscription: '$(armServiceConnection)'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az storage blob upload-batch -s $(Pipeline.Workspace)/CI-Pipeline/$(ciArtifactName)/$(frontendFolderName) -d '$(blobContainerFrontendDeployment)' --account-name $(storageAccountName) --overwrite=true

                - task: AzureCLI@2
                  displayName: 'Set static website'
                  inputs:
                    azureSubscription: '$(armServiceConnection)'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az storage blob service-properties update --account-name $(storageAccountName) --static-website --index-document index.html --404-document 404.html

                - task: AzureCLI@2
                  displayName: 'Purge CDN'
                  inputs:
                    azureSubscription: '$(armServiceConnection)'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az cdn endpoint purge -g $(resourceGroupName) -n $(cdnEndpointName) --profile-name $(cdnProfileName) --content-paths '/*' --no-wait
                
                - task: AzureCLI@2
                  displayName: 'Set Function Key'
                  continueOnError: true
                  inputs:
                    azureSubscription: '$(armServiceConnection)'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az functionapp restart --name $(serviceFuncName) --resource-group $(resourceGroupName)
                      az functionapp keys set --name $(serviceFuncName) --resource-group $(resourceGroupName) --key-name client --key-type functionKeys --key-value $(adminServiceFuncKeySecret)
