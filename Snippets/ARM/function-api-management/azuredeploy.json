{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "resourceNamePrefix": {
            "type": "string",
            "defaultValue": "customer-project",
            "metadata": {
                "description": "The prefix will be used for every parameter that represents a resource name. See the description of the parameter."
            }
        },
        "resourceNameSuffix": {
            "type": "string",
            "metadata": {
                "description": "The suffix will be appended to every parameter that represents a resource name. See the description of the parameter."
            }
        },
        "apiManagementSku": {
            "type": "string",
            "defaultValue": "Developer",
            "allowedValues": [
                "Consumption",
                "Developer",
                "Basic"
            ]
        },
        "apiManagementPublisherEmail": {
            "type": "string",
            "defaultValue": "project@customer.com"
        },
        "apiManagementPublisherName": {
            "type": "string",
            "defaultValue": "Customer AG"
        },
        "apiManagementKey": {
            "type": "securestring",
            "defaultValue": "[base64(newGuid())]"
        }
    },
    "variables": {
        "logAnalyticsWsName": "[concat(parameters('resourceNamePrefix'), '-', 'law', '-', parameters('resourceNameSuffix'))]",
        "appInsightsName": "[concat(parameters('resourceNamePrefix'), '-', 'ai', '-', parameters('resourceNameSuffix'))]",
        "apiMgmtName": "[concat(parameters('resourceNamePrefix'), '-', 'apim', '-', parameters('resourceNameSuffix'))]",
        "storageAccountName": "[replace(concat(parameters('resourceNamePrefix'), '-', 'sa', '-', parameters('resourceNameSuffix')), '-', '')]",
        "templateFuncName": "[concat(parameters('resourceNamePrefix'), '-', 'template-f', '-', parameters('resourceNameSuffix'))]",

        "appServicePlanName": "[concat(parameters('resourceNamePrefix'), '-', 'asp', '-', parameters('resourceNameSuffix'))]",
        "appServicePlanSku": {
            "name": "Y1",
            "tier": "Dynamic"
        },
		
        "apiMgmtTemplateApi": "test-api",
        "apiMgmtTemplateApiDisplayName": "Test API",
        "apiMgmtTemplateApiPath": "test",
        "apiMgmtTemplateProduct": "test-product",
        "apiMgmtTemplateProductDisplayName": "Test API Integration"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "apiVersion": "2019-06-01",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2020-09-01",
            "name": "[variables('appServicePlanName')]",
            "location": "[resourceGroup().location]",
            "sku": "[variables('appServicePlanSku')]",
            "properties": {
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "name": "[variables('logAnalyticsWsName')]",
            "apiVersion": "2020-08-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "sku": {
                    "name": "pergb2018"
                },
				"retentionInDays": 30
            }
        },
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "2020-02-02-preview",
            "name": "[variables('appInsightsName')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
            ],
            "location": "[resourceGroup().location]",
            "kind": "web",
            "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "kind": "functionapp",
            "name": "[variables('templateFuncName')]",
            "apiVersion": "2020-09-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "enabled": true,
                "hostNameSslStates": [
                    {
                        "name": "[concat(variables('templateFuncName'),'.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Standard"
                    },
                    {
                        "name": "[concat(variables('templateFuncName'),'.scm.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Repository"
                    }
                ],
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "clientAffinityEnabled": true,
                "containerSize": 1536,
                "dailyMemoryTimeQuota": 0,
                "httpsOnly": true
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/sites/config",
            "name": "[concat(variables('templateFuncName'), '/appsettings')]",
            "apiVersion": "2020-09-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('templateFuncName'))]"
            ],
            "properties": {
                "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]",
                "AzureWebJobsDisableHomepage": true,
                "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]",
                "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(concat('Microsoft.Insights/components/', variables('appInsightsName'))).InstrumentationKey]",
                "APPINSIGHTS_PROFILERFEATURE_VERSION": "1.0.0",
                "APPINSIGHTS_SNAPSHOTFEATURE_VERSION": "1.0.0",
                "DiagnosticServices_EXTENSION_VERSION": "~3",
                "ApplicationInsightsAgent_EXTENSION_VERSION": "~2",
				"FUNCTIONS_EXTENSION_VERSION": "~3",
                "WEBSITE_CONTENTSHARE": "[variables('templateFuncName')]",
                "WEBSITE_TIME_ZONE": "W. Europe Standard Time"
            }
        },
        {
            "type": "Microsoft.Web/sites/host/functionKeys",
            "name": "[concat(variables('templateFuncName'), '/default/apimanagement')]",
            "apiVersion": "2019-08-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('templateFuncName'))]"
            ],
            "properties": {
                "name": "apimanagement",
                "value": "[parameters('apiManagementKey')]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service",
            "apiVersion": "2019-01-01",
            "name": "[variables('apiMgmtName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "[parameters('apiManagementSku')]"
            },
            "properties": {
                "publisherEmail": "[parameters('apiManagementPublisherEmail')]",
                "publisherName": "[parameters('apiManagementPublisherName')]"
            },
            "identity": {
                "type": "SystemAssigned"
            }
        },
		{
            "type": "Microsoft.ApiManagement/service/loggers",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apiMgmtName'), '/', variables('appInsightsName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]",
                "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
            ],
            "properties": {
                "loggerType": "applicationInsights",
                "credentials": {
                    "instrumentationKey": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
                },
                "isBuffered": true,
                "resourceId": "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
            }
        },
		{
            "type": "Microsoft.ApiManagement/service/diagnostics",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apiMgmtName'), '/applicationinsights')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]",
                "[resourceId('Microsoft.ApiManagement/service/loggers', variables('apiMgmtName'), variables('appInsightsName'))]"
            ],
            "properties": {
                "alwaysLog": "allErrors",
                "loggerId": "[resourceId('Microsoft.ApiManagement/service/loggers', variables('apiMgmtName'), variables('appInsightsName'))]",
                "sampling": {
                    "samplingType": "fixed",
                    "percentage": 100
                }
            }
        },
		{
            "type": "Microsoft.ApiManagement/service/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[concat(variables('apiMgmtName'), '/Microsoft.Insights/', 'LogAnalytics')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]",
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
            ],
            "properties": {
                "name": "LogAnalytics",
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]",
                "logs": [
                    {
                        "category": "GatewayLogs",
                        "enabled": true
                    }
                ],
                "metrics": [
                    {
                        "category": "Gateway Requests",
                        "enabled": true
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/backends",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apiMgmtName'), '/', 'template-backend')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]",
                "[resourceId('Microsoft.Web/sites/host/functionKeys', variables('templateFuncName'), 'default', 'apimanagement')]"
            ],
            "properties": {
                "description": "[variables('templateFuncName')]",
                "url": "[concat('https://', variables('templateFuncName'), '.azurewebsites.net/api')]",
                "protocol": "http",
                "resourceId": "[concat('https://management.azure.com', resourceId('Microsoft.Web/sites', variables('templateFuncName')))]",
                "credentials": {
                    "header": {
                        "x-functions-key": [
                            "[listkeys(concat(resourceId('Microsoft.Web/sites', variables('templateFuncName')), '/host/default/'),'2019-08-01').functionKeys.apimanagement]"
                        ]
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/policies",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apiMgmtName'), '/', 'policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]"
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <set-query-parameter name=\"subscriptionId\" exists-action=\"override\">\r\n      <value>@(context.Subscription.Id)</value>\r\n    </set-query-parameter>\r\n    <set-query-parameter name=\"userId\" exists-action=\"override\">\r\n      <value>@(context.User.Id)</value>\r\n    </set-query-parameter>\r\n    <cors>\r\n        <allowed-origins>\r\n        <origin>*</origin>\r\n        </allowed-origins>\r\n        <allowed-methods>\r\n        <method>*</method>\r\n        </allowed-methods>\r\n        <allowed-headers>\r\n        <header>*</header>\r\n        </allowed-headers>\r\n        <expose-headers>\r\n        <header>*</header>\r\n        </expose-headers>\r\n    </cors>\r\n  </inbound>\r\n  <backend>\r\n    <forward-request />\r\n  </backend>\r\n  <outbound />\r\n  <on-error />\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apiMgmtName'), '/', variables('apiMgmtTemplateApi'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]"
            ],
            "properties": {
                "displayName": "[variables('apiMgmtTemplateApiDisplayName')]",
                "apiRevision": "1",
                "subscriptionRequired": true,
                "path": "[variables('apiMgmtTemplateApiPath')]",
                "protocols": [
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/policies",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apiMgmtName'), '/', variables('apiMgmtTemplateApi'), '/', 'policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apiMgmtName'), variables('apiMgmtTemplateApi'))]",
                "[resourceId('Microsoft.ApiManagement/service/backends', variables('apiMgmtName'), 'template-backend')]"
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-backend-service backend-id=\"template-backend\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/schemas",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apiMgmtName'), '/', variables('apiMgmtTemplateApi'), '/', 'template-schema')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apiMgmtName'), variables('apiMgmtTemplateApi'))]"
            ],
            "properties": {
                "contentType": "application/vnd.oai.openapi.components+json",
                "document": {
                    "components": {
                        "schemas": {
                            "RequestObject": {
                                "required": [
                                    "intProperty"
                                ],
                                "type": "object",
                                "properties": {
                                    "intProperty": {
                                        "maximum": 2,
                                        "minimum": 1,
                                        "type": "integer",
                                        "description": "The value must be either 1 or 2"
                                    },
                                    "stringProperty": {
                                        "type": "string",
                                        "description": "Any additional text informing about content or purpose of the message"
                                    }
                                },
                                "example": {
                                    "intProperty": 2,
                                    "messageTypeInfo": "Message XYZ"
                                }
                            },
                            "ResponseObject": {
                                "required": [
                                    "transferStatusCode"
                                ],
                                "type": "object",
                                "properties": {
                                    "transferId": {
                                        "type": "string"
                                    },
                                    "transferTimestamp": {
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "transferStatusCode": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "maximum": 4
                                    },
                                    "transferStatusInfo": {
                                        "type": "string"
                                    }
                                },
                                "example": {
                                    "transferId": "1aa41d46-1edb-487c-acc8-9e3d6151da1e",
                                    "transferTimestamp": "2020-01-01T23:28:56Z",
                                    "transferStatusCode": 0,
                                    "transferStatusInfo": "Request accepted"
                                }
                            }
                        },
                        "securitySchemes": {
                            "apiKeyHeader": {
                                "type": "apiKey",
                                "name": "Ocp-Apim-Subscription-Key",
                                "in": "header"
                            },
                            "apiKeyQuery": {
                                "type": "apiKey",
                                "name": "subscription-key",
                                "in": "query"
                            }
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apiMgmtName'), '/', variables('apiMgmtTemplateApi'), '/', 'test')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/schemas', variables('apiMgmtName'), variables('apiMgmtTemplateApi'), 'template-schema')]",
                "[resourceId('Microsoft.ApiManagement/service/apis', variables('apiMgmtName'), variables('apiMgmtTemplateApi'))]",
                "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]"
            ],
            "properties": {
                "displayName": "Test",
                "method": "POST",
                "urlTemplate": "/testapi",
                "templateParameters": [],
                "description": "An example to show setup of API Management with Azure Functions",
                "request": {
                    "description": "Test API with some values",
                    "queryParameters": [
                        {
                            "name": "testParam",
                            "description": "Test only",
                            "type": "boolean",
                            "required": false,
                            "values": []
                        }
                    ],
                    "headers": [],
                    "representations": [
                        {
                            "contentType": "application/json",
                            "sample": "{\r\n   \"intProperty\": 2,\r\n   \"messageTypeInfo\": \"Message XYZ\"\r\n}",
                            "schemaId": "template-schema",
                            "typeName": "RequestObject"
                        }
                    ]
                },
                "responses": [
                    {
                        "statusCode": 200,
                        "description": "Successfully processed",
                        "representations": [
                            {
                                "contentType": "application/json",
                                "sample": "{\r\n   \"transferId\": \"1aa41d46-1edb-487c-acc8-9e3d6151da1e\",\r\n   \"transferTimestamp\": \"2020-01-01T23:28:56Z\",\r\n   \"transferStatusCode\": 0,\r\n   \"transferStatusInfo\": \"Request accepted\"\r\n}",
                                "schemaId": "template-schema",
                                "typeName": "ResponseObject"
                            }
                        ],
                        "headers": []
                    },
                    {
                        "statusCode": 400,
                        "description": "Failure",
                        "representations": [
                            {
                                "contentType": "application/json",
                                "sample": "{\r\n  \"transferStatusCode\": 4,\r\n  \"transferStatusInfo\": \"InvalidData\"\r\n}"
                            }
                        ],
                        "headers": []
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apiMgmtName'), '/', variables('apiMgmtTemplateApi'), '/', 'test', '/', 'policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apiMgmtName'), variables('apiMgmttemplateApi'), 'test')]"
            ],
            "properties": {
                "value": "<policies>\r\n  <inbound>\r\n    <base />\r\n    <rewrite-uri template=\"/testfunction\" copy-unmatched-params=\"true\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/products",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apiMgmtName'), '/', variables('apiMgmtTemplateProduct'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]"
            ],
            "properties": {
                "displayName": "[variables('apiMgmtTemplateProductDisplayName')]",
                "description": "Provide Azure Function endpoints",
                "subscriptionRequired": true,
                "approvalRequired": true,
                "state": "published"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/products/apis",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apiMgmtName'), '/', variables('apiMgmtTemplateProduct'), '/', variables('apiMgmtTemplateApi'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/products', variables('apiMgmtName'), variables('apiMgmtTemplateProduct'))]"
            ],
            "properties": {}
        },
        {
            "type": "Microsoft.ApiManagement/service/products/groups",
            "apiVersion": "2019-01-01",
            "name": "[concat(variables('apiMgmtName'), '/', variables('apiMgmtTemplateProduct'), '/', 'developers')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/products', variables('apiMgmtName'), variables('apiMgmtTemplateProduct'))]"
            ],
            "properties": {}
        }
    ],
    "outputs": {}
}
