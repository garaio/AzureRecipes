{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1272.37030",
      "templateHash": "9730111920135023225"
    }
  },
  "parameters": {
    "resourceNamePrefix": {
      "type": "string",
      "defaultValue": "customer-project",
      "metadata": {
        "description": "The prefix will be used for every parameter that represents a resource name. See the description of the parameter."
      }
    },
    "resourceNameSuffix": {
      "type": "string",
      "metadata": {
        "description": "The suffix will be appended to every parameter that represents a resource name. See the description of the parameter."
      }
    },
    "resourceLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "deployUserAuth": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Register API with Azure Active Directory (B2C or regular) to enforce user authentication."
      }
    },
    "serviceAppId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Client Id of App Registration in Azure Active Directory (B2C or regular). Required when parameter 'deployUserAuth' is set to true."
      }
    },
    "aadB2cName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Azure AD B2C domain name. Required when parameter 'deployUserAuth' is set to true."
      }
    },
    "usePremiumFunctionPlan": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "For production deployments use Premium App Service Plan which provides lower latency thanks to pre-warmed instances."
      }
    },
    "signalRServiceSku": {
      "type": "string",
      "defaultValue": "Free_F1",
      "allowedValues": [
        "Free_F1",
        "Standard_S1"
      ]
    },
    "deploySignalRService": {
      "type": "bool",
      "defaultValue": false
    },
    "appConfigStoreSku": {
      "type": "string",
      "defaultValue": "free",
      "allowedValues": [
        "free",
        "standard"
      ]
    },
    "deployAppConfigStore": {
      "type": "bool",
      "defaultValue": false
    }
  },
  "variables": {
    "logAnalyticsWsName": "[format('{0}-law-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "appInsightsName": "[format('{0}-ai-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "keyVaultName": "[format('{0}-kv-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "keyVaultAppPermissions": {
      "keys": [
        "get"
      ],
      "secrets": [
        "get"
      ]
    },
    "keyVaultSecretStorageAccountConnectionString": "storageAccountConnectionString",
    "keyVaultSecretCosmosDbConnectionString": "cosmosDbConnectionString",
    "keyVaultSecretSignalRConnectionString": "signalRConnectionString",
    "keyVaultSecretAppConfigStoreConnectionString": "appConfigStoreConnectionString",
    "blobContainerConfig": "config",
    "blobContainerDeployment": "deployment",
    "storageAccountName": "[replace(format('{0}-sa-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix')), '-', '')]",
    "storageAccountBlobs": [
      {
        "name": "[variables('blobContainerConfig')]",
        "publicAccess": "None"
      },
      {
        "name": "[variables('blobContainerDeployment')]",
        "publicAccess": "None"
      }
    ],
    "storageAccountBlobUri": "[format('https://{0}.blob.{1}/', variables('storageAccountName'), environment().suffixes.storage)]",
    "storageAccountFunctionSasParams": {
      "signedServices": "b",
      "signedResourceTypes": "o",
      "signedPermission": "r",
      "signedExpiry": "2050-01-01T00:00:00Z"
    },
    "storageAccountRegionalCodes": {
      "fakeLocation": "z0",
      "westeurope": "z6",
      "switzerlandnorth": "z1"
    },
    "cdnProfileName": "[format('{0}-cdn-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "cdnEndpointName": "[format('{0}-cdn-ep-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "cdnEndpointOriginHost": "[format('{0}.{1}.web.{2}', variables('storageAccountName'), variables('storageAccountRegionalCodes')[parameters('resourceLocation')], environment().suffixes.storage)]",
    "cdnEndpointOriginName": "[format('{0}-static-website', variables('storageAccountName'))]",
    "appServicePlanName": "[format('{0}-asp-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "serviceFuncName": "[format('{0}-service-f-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "serviceFuncPackagePath": "/Customer.Project.ServiceFuncApp.zip",
    "signalRServiceName": "[format('{0}-sigr-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "appConfigStoreName": "[format('{0}-acs-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "cosmosDbAccountName": "[format('{0}-cdb-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "pid-d16e7b59-716a-407d-96db-18d1cac40407",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('resourceLocation')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "copy": {
        "name": "storageAccountBlobContainerRes",
        "count": "[length(variables('storageAccountBlobs'))]"
      },
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountBlobs')[copyIndex()].name)]",
      "properties": {
        "publicAccess": "[variables('storageAccountBlobs')[copyIndex()].publicAccess]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "name": "[variables('logAnalyticsWsName')]",
      "location": "[parameters('resourceLocation')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('resourceLocation')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('resourceLocation')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForTemplateDeployment": true,
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyVaultName'))]",
      "name": "LogAnalytics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]",
        "logs": [
          {
            "category": "AuditEvent",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('keyVaultSecretStorageAccountConnectionString'))]",
      "properties": {
        "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('keyVaultSecretCosmosDbConnectionString'))]",
      "properties": {
        "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName')), '2020-04-01').connectionStrings[0].connectionString]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "condition": "[parameters('deploySignalRService')]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('keyVaultSecretSignalRConnectionString'))]",
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.SignalRService/signalR', variables('signalRServiceName')), '2021-06-01-preview').primaryConnectionString]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.SignalRService/signalR', variables('signalRServiceName'))]"
      ]
    },
    {
      "condition": "[parameters('deployAppConfigStore')]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('keyVaultSecretAppConfigStoreConnectionString'))]",
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigStoreName')), '2021-03-01-preview').value[0].connectionString]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigStoreName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'add')]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('serviceFuncName')), '2019-08-01', 'Full').identity.principalId]",
            "permissions": "[variables('keyVaultAppPermissions')]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Web/sites', variables('serviceFuncName'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2021-06-15",
      "name": "[variables('cosmosDbAccountName')]",
      "location": "[parameters('resourceLocation')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "publicNetworkAccess": "Enabled",
        "enableAutomaticFailover": false,
        "enableMultipleWriteLocations": false,
        "enableFreeTier": false,
        "enableAnalyticalStorage": false,
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "locations": [
          {
            "locationName": "[parameters('resourceLocation')]",
            "failoverPriority": 0,
            "isZoneRedundant": false
          }
        ],
        "capabilities": [
          {
            "name": "EnableServerless"
          }
        ],
        "backupPolicy": {
          "type": "Continuous"
        }
      }
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', variables('cosmosDbAccountName'))]",
      "name": "LogAnalytics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]",
        "logs": [
          {
            "category": "QueryRuntimeStatistics",
            "enabled": true
          },
          {
            "category": "PartitionKeyStatistics",
            "enabled": true
          },
          {
            "category": "PartitionKeyRUConsumption",
            "enabled": true
          },
          {
            "category": "ControlPlaneRequests",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "Requests",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      ]
    },
    {
      "condition": "[not(parameters('usePremiumFunctionPlan'))]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-03-01",
      "name": "[if(parameters('usePremiumFunctionPlan'), uniqueString(resourceGroup().id), variables('appServicePlanName'))]",
      "location": "[parameters('resourceLocation')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "properties": {}
    },
    {
      "condition": "[parameters('usePremiumFunctionPlan')]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-03-01",
      "name": "[if(parameters('usePremiumFunctionPlan'), variables('appServicePlanName'), uniqueString(resourceGroup().id))]",
      "location": "[parameters('resourceLocation')]",
      "sku": {
        "name": "EP1",
        "tier": "ElasticPremium"
      },
      "kind": "elastic",
      "properties": {
        "maximumElasticWorkerCount": 20
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[variables('serviceFuncName')]",
      "location": "[parameters('resourceLocation')]",
      "kind": "functionapp",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[format('{0}.azurewebsites.net', variables('serviceFuncName'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[format('{0}.scm.azurewebsites.net', variables('serviceFuncName'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "clientAffinityEnabled": true,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "siteConfig": {
          "cors": {
            "allowedOrigins": [
              "*"
            ]
          },
          "preWarmedInstanceCount": 1,
          "minimumElasticInstanceCount": "[if(parameters('usePremiumFunctionPlan'), 1, 0)]"
        }
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', if(parameters('usePremiumFunctionPlan'), uniqueString(resourceGroup().id), variables('appServicePlanName')))]",
        "[resourceId('Microsoft.Web/serverfarms', if(parameters('usePremiumFunctionPlan'), variables('appServicePlanName'), uniqueString(resourceGroup().id)))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}/{1}', variables('serviceFuncName'), 'appsettings')]",
      "properties": {
        "AzureWebJobsStorage": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('keyVaultSecretStorageAccountConnectionString'))]",
        "AzureWebJobsDisableHomepage": "true",
        "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]",
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]",
        "FUNCTIONS_EXTENSION_VERSION": "~3",
        "FUNCTIONS_WORKER_RUNTIME": "dotnet",
        "WEBSITE_TIME_ZONE": "W. Europe Standard Time",
        "WEBSITE_RUN_FROM_PACKAGE": "[format('{0}{1}{2}?{3}', variables('storageAccountBlobUri'), variables('blobContainerDeployment'), variables('serviceFuncPackagePath'), listAccountSas(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01', variables('storageAccountFunctionSasParams')).accountSasToken)]",
        "WEBSITE_CONTENTSHARE": "[variables('serviceFuncName')]",
        "StorageConnectionString": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('keyVaultSecretStorageAccountConnectionString'))]",
        "ConfigContainerName": "[variables('blobContainerConfig')]",
        "CosmosDbConnectionString": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('keyVaultSecretCosmosDbConnectionString'))]",
        "SignalRConnectionString": "[if(parameters('deploySignalRService'), format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('keyVaultSecretSignalRConnectionString')), '')]",
        "AppConfigStoreConnectionString": "[if(parameters('deployAppConfigStore'), format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('keyVaultSecretAppConfigStoreConnectionString')), '')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultSecretAppConfigStoreConnectionString'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultSecretCosmosDbConnectionString'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultSecretSignalRConnectionString'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultSecretStorageAccountConnectionString'))]",
        "[resourceId('Microsoft.Web/sites', variables('serviceFuncName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "condition": "[parameters('deployUserAuth')]",
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}/{1}', variables('serviceFuncName'), 'authsettingsV2')]",
      "properties": {
        "platform": {
          "enabled": true
        },
        "globalValidation": {
          "requireAuthentication": true,
          "unauthenticatedClientAction": "RedirectToLoginPage",
          "redirectToProvider": "AzureActiveDirectory"
        },
        "identityProviders": {
          "azureActiveDirectory": {
            "enabled": true,
            "registration": {
              "openIdIssuer": "[if(empty(parameters('aadB2cName')), format('{0}{1}', environment().authentication.loginEndpoint, subscription().tenantId), format('https://{0}.b2clogin.com/{1}.onmicrosoft.com/v2.0/.well-known/openid-configuration?p=B2C_1_signupsignin', parameters('aadB2cName'), parameters('aadB2cName')))]",
              "clientId": "[parameters('serviceAppId')]"
            },
            "isAutoProvisioned": true
          }
        },
        "login": {
          "tokenStore": {
            "enabled": true
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('serviceFuncName'))]"
      ]
    },
    {
      "type": "Microsoft.Cdn/profiles",
      "apiVersion": "2020-04-15",
      "name": "[variables('cdnProfileName')]",
      "location": "[parameters('resourceLocation')]",
      "sku": {
        "name": "Standard_Microsoft"
      },
      "properties": {}
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Cdn/profiles/{0}', variables('cdnProfileName'))]",
      "name": "LogAnalytics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]",
        "logs": [
          {
            "category": "AzureCdnAccessLog",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('cdnProfileName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      ]
    },
    {
      "type": "Microsoft.Cdn/profiles/endpoints",
      "apiVersion": "2020-04-15",
      "name": "[format('{0}/{1}', variables('cdnProfileName'), variables('cdnEndpointName'))]",
      "location": "[parameters('resourceLocation')]",
      "properties": {
        "originHostHeader": "[variables('cdnEndpointOriginHost')]",
        "isHttpAllowed": true,
        "isHttpsAllowed": true,
        "queryStringCachingBehavior": "IgnoreQueryString",
        "origins": [
          {
            "name": "[variables('cdnEndpointOriginName')]",
            "properties": {
              "hostName": "[variables('cdnEndpointOriginHost')]",
              "originHostHeader": "[variables('cdnEndpointOriginHost')]",
              "priority": 1,
              "weight": 1000,
              "enabled": true
            }
          }
        ],
        "optimizationType": "GeneralWebDelivery",
        "geoFilters": [],
        "deliveryPolicy": {
          "rules": [
            {
              "name": "http2https",
              "order": 1,
              "conditions": [
                {
                  "name": "RequestScheme",
                  "parameters": {
                    "@odata.type": "#Microsoft.Azure.Cdn.Models.DeliveryRuleRequestSchemeConditionParameters",
                    "operator": "Equal",
                    "negateCondition": false,
                    "matchValues": [
                      "HTTP"
                    ]
                  }
                }
              ],
              "actions": [
                {
                  "name": "UrlRedirect",
                  "parameters": {
                    "@odata.type": "#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlRedirectActionParameters",
                    "redirectType": "Moved",
                    "destinationProtocol": "Https"
                  }
                }
              ]
            },
            {
              "name": "SpaSubRouting",
              "order": 2,
              "conditions": [
                {
                  "name": "UrlFileExtension",
                  "parameters": {
                    "@odata.type": "#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlFileExtensionMatchConditionParameters",
                    "operator": "GreaterThan",
                    "negateCondition": true,
                    "matchValues": [
                      "0"
                    ],
                    "transforms": []
                  }
                }
              ],
              "actions": [
                {
                  "name": "UrlRewrite",
                  "parameters": {
                    "@odata.type": "#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlRewriteActionParameters",
                    "sourcePattern": "/",
                    "destination": "/index.html",
                    "preserveUnmatchedPath": false
                  }
                }
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('cdnProfileName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Cdn/profiles/endpoints/origins",
      "apiVersion": "2020-04-15",
      "name": "[format('{0}/{1}/{2}', variables('cdnProfileName'), variables('cdnEndpointName'), variables('cdnEndpointOriginName'))]",
      "properties": {
        "hostName": "[variables('cdnEndpointOriginHost')]",
        "enabled": true,
        "priority": 1,
        "weight": 1000,
        "originHostHeader": "[variables('cdnEndpointOriginHost')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles/endpoints', variables('cdnProfileName'), variables('cdnEndpointName'))]",
        "[resourceId('Microsoft.Cdn/profiles', variables('cdnProfileName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Cdn/profiles/{0}/endpoints/{1}', variables('cdnProfileName'), variables('cdnEndpointName'))]",
      "name": "LogAnalytics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]",
        "logs": [
          {
            "category": "CoreAnalytics",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles/endpoints', variables('cdnProfileName'), variables('cdnEndpointName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      ]
    },
    {
      "condition": "[parameters('deploySignalRService')]",
      "type": "Microsoft.SignalRService/signalR",
      "apiVersion": "2021-06-01-preview",
      "name": "[variables('signalRServiceName')]",
      "location": "[parameters('resourceLocation')]",
      "sku": {
        "name": "[parameters('signalRServiceSku')]",
        "capacity": 1
      },
      "properties": {
        "features": [
          {
            "flag": "ServiceMode",
            "value": "Serverless"
          },
          {
            "flag": "EnableConnectivityLogs",
            "value": "true"
          },
          {
            "flag": "EnableMessagingLogs",
            "value": "true"
          },
          {
            "flag": "EnableLiveTrace",
            "value": "true"
          }
        ],
        "cors": {
          "allowedOrigins": [
            "*"
          ]
        },
        "tls": {
          "clientCertEnabled": false
        }
      }
    },
    {
      "condition": "[parameters('deploySignalRService')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.SignalRService/signalR/{0}', variables('signalRServiceName'))]",
      "name": "LogAnalytics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]",
        "logs": [
          {
            "category": "AllLogs",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]",
        "[resourceId('Microsoft.SignalRService/signalR', variables('signalRServiceName'))]"
      ]
    },
    {
      "condition": "[parameters('deployAppConfigStore')]",
      "type": "Microsoft.AppConfiguration/configurationStores",
      "apiVersion": "2021-03-01-preview",
      "name": "[variables('appConfigStoreName')]",
      "location": "[parameters('resourceLocation')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "disableLocalAuth": false
      },
      "sku": {
        "name": "[parameters('appConfigStoreSku')]"
      }
    },
    {
      "condition": "[parameters('deployAppConfigStore')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', variables('appConfigStoreName'))]",
      "name": "LogAnalytics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]",
        "logs": [
          {
            "category": "HttpRequest",
            "enabled": true
          },
          {
            "category": "Audit",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigStoreName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      ]
    }
  ],
  "outputs": {
    "storageAccountWebEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01', 'Full').properties.primaryEndpoints.web]"
    },
    "appInsightsInstrumentationKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
    }
  }
}