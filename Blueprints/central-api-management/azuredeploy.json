{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.6.11.53198",
      "templateHash": "9847471072802028914"
    }
  },
  "parameters": {
    "resourceNamePrefix": {
      "type": "string",
      "defaultValue": "customer-project",
      "metadata": {
        "description": "The prefix will be used for every parameter that represents a resource name. See the description of the parameter."
      }
    },
    "resourceNameSuffix": {
      "type": "string",
      "metadata": {
        "description": "The suffix will be appended to every parameter that represents a resource name. See the description of the parameter."
      }
    },
    "resourceLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "apiManagementSku": {
      "type": "string",
      "defaultValue": "Developer",
      "allowedValues": [
        "Developer",
        "Basic"
      ]
    },
    "apiManagementPublisherEmail": {
      "type": "string",
      "defaultValue": "it@customer.ch"
    },
    "apiManagementPublisherName": {
      "type": "string",
      "defaultValue": "Customer AG"
    },
    "configureApiManagementDevPortal": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploys Front Door setup for Developer Portal as well as some CORS-settings in the API Management"
      }
    },
    "apiManagementDevPortalAadAppClientId": {
      "type": "string",
      "defaultValue": ""
    },
    "apiManagementDevPortalAadAppClientSecret": {
      "type": "secureString",
      "defaultValue": ""
    },
    "frontDoorSku": {
      "type": "string",
      "defaultValue": "Standard_AzureFrontDoor",
      "allowedValues": [
        "Standard_AzureFrontDoor",
        "Premium_AzureFrontDoor"
      ],
      "metadata": {
        "description": "The name of the SKU to use when creating the Front Door profile. If you use Private Link this must be set to `Premium_AzureFrontDoor`."
      }
    },
    "frontDoorSpnObjectId": {
      "type": "string",
      "defaultValue": "00000000-0000-0000-0000-000000000000"
    },
    "customDomainApimApi": {
      "type": "string",
      "defaultValue": "int.api.customer.ch"
    },
    "customDomainApimPortal": {
      "type": "string",
      "defaultValue": "portal.api.customer.ch"
    },
    "useExistingKeyVault": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "If set to false, it deploys the KeyVault as fresh new instance including removal of all other access policies. If set to true, the KeyVault needs to be existing, otherwise an error is thrown."
      }
    }
  },
  "variables": {
    "logAnalyticsWsName": "[format('{0}-law-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "appInsightsName": "[format('{0}-ai-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "keyVaultName": "[format('{0}-kv-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "keyVaultMgmtPermissions": {
      "secrets": [
        "get",
        "list"
      ],
      "certificates": [
        "get",
        "getissuers",
        "list",
        "listissuers"
      ]
    },
    "apiMgmtName": "[format('{0}-apim-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "apiMgmtFrontDoorIdNamedValueName": "FrontDoorId",
    "frontDoorName": "[format('{0}-fd-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "frontDoorApiEndpoint": "[format('{0}-fd-api-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "frontDoorDevPortalEndpoint": "[format('{0}-fd-portal-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "frontDoorWafName": "[replace(format('{0}-fd-waf-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix')), '-', '')]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "pid-d16e7b59-716a-407d-96db-18d1cac40407",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "name": "[variables('logAnalyticsWsName')]",
      "location": "[parameters('resourceLocation')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('resourceLocation')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('resourceLocation')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForTemplateDeployment": true,
        "createMode": "[if(parameters('useExistingKeyVault'), 'recover', 'default')]",
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyVaultName'))]",
      "name": "LogAnalytics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]",
        "logs": [
          {
            "category": "AuditEvent",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'add')]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName')), '2021-08-01', 'Full').identity.principalId]",
            "permissions": "[variables('keyVaultMgmtPermissions')]"
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[parameters('frontDoorSpnObjectId')]",
            "permissions": "[if(not(equals(parameters('frontDoorSpnObjectId'), '')), variables('keyVaultMgmtPermissions'), createObject())]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service",
      "apiVersion": "2021-08-01",
      "name": "[variables('apiMgmtName')]",
      "location": "[parameters('resourceLocation')]",
      "sku": {
        "name": "[parameters('apiManagementSku')]",
        "capacity": "[if(equals(parameters('apiManagementSku'), 'Consumption'), 0, 1)]"
      },
      "properties": {
        "publisherEmail": "[parameters('apiManagementPublisherEmail')]",
        "publisherName": "[parameters('apiManagementPublisherName')]"
      },
      "identity": {
        "type": "SystemAssigned"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/loggers",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}', variables('apiMgmtName'), variables('appInsightsName'))]",
      "properties": {
        "loggerType": "applicationInsights",
        "credentials": {
          "instrumentationKey": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
        },
        "isBuffered": true,
        "resourceId": "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/diagnostics",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}', variables('apiMgmtName'), 'applicationinsights')]",
      "properties": {
        "alwaysLog": "allErrors",
        "loggerId": "[resourceId('Microsoft.ApiManagement/service/loggers', variables('apiMgmtName'), variables('appInsightsName'))]",
        "sampling": {
          "samplingType": "fixed",
          "percentage": 100
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]",
        "[resourceId('Microsoft.ApiManagement/service/loggers', variables('apiMgmtName'), variables('appInsightsName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.ApiManagement/service/{0}', variables('apiMgmtName'))]",
      "name": "LogAnalytics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]",
        "logs": [
          {
            "category": "GatewayLogs",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      ]
    },
    {
      "condition": "[and(parameters('configureApiManagementDevPortal'), not(equals(parameters('apiManagementDevPortalAadAppClientId'), '')))]",
      "type": "Microsoft.ApiManagement/service/identityProviders",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}', variables('apiMgmtName'), 'aad')]",
      "properties": {
        "type": "aad",
        "clientId": "[parameters('apiManagementDevPortalAadAppClientId')]",
        "clientSecret": "[parameters('apiManagementDevPortalAadAppClientSecret')]",
        "authority": "[environment().authentication.loginEndpoint]",
        "signinTenant": "[subscription().tenantId]",
        "allowedTenants": [
          "[subscription().tenantId]"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}', variables('apiMgmtName'), variables('apiMgmtFrontDoorIdNamedValueName'))]",
      "properties": {
        "displayName": "[variables('apiMgmtFrontDoorIdNamedValueName')]",
        "value": "[reference(resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))).frontDoorId]",
        "secret": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]",
        "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service/policies",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}', variables('apiMgmtName'), 'policy')]",
      "properties": {
        "value": "[if(parameters('configureApiManagementDevPortal'), format('<policies><inbound><cors allow-credentials=\"true\" terminate-unmatched-request=\"false\"><allowed-origins><origin>{0}</origin><origin>https://{1}</origin><origin>https://{2}</origin></allowed-origins><allowed-methods preflight-result-max-age=\"300\"><method>*</method></allowed-methods><allowed-headers><header>*</header></allowed-headers><expose-headers><header>*</header></expose-headers></cors><choose><when condition=\"@(context.Request.Method == &quot;OPTIONS&quot;)\" /><when condition=\"@(context.Request.Headers.GetValueOrDefault(&quot;X-Azure-FDID&quot;,&quot;&quot;) == &quot;&quot;)\"><return-response><set-status code=\"307\" reason=\"Redirecting\" /><set-header name=\"Location\" exists-action=\"override\"><value>@(\"https://{3}\" + context.Request.OriginalUrl.Path + context.Request.OriginalUrl.QueryString)</value></set-header></return-response></when><otherwise><check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"403\" failed-check-error-message=\"Invalid request.\" ignore-case=\"false\"><value>{{{{FrontDoorId}}}}</value></check-header></otherwise></choose></inbound><backend><forward-request /></backend></policies>', reference(resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))).developerPortalUrl, reference(resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorDevPortalEndpoint')), '2021-06-01').hostName, parameters('customDomainApimPortal'), reference(resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorApiEndpoint'))).hostName), format('<policies><inbound><check-header name=\"X-Azure-FDID\" failed-check-httpcode=\"403\" failed-check-error-message=\"Invalid request.\" ignore-case=\"false\"><value>{{{{{0}}}}}</value></check-header></inbound><backend><forward-request /></backend></policies>', variables('apiMgmtFrontDoorIdNamedValueName')))]",
        "format": "xml"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service/namedValues', variables('apiMgmtName'), variables('apiMgmtFrontDoorIdNamedValueName'))]",
        "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]",
        "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorApiEndpoint'))]",
        "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorDevPortalEndpoint'))]"
      ]
    },
    {
      "type": "Microsoft.Cdn/profiles",
      "apiVersion": "2021-06-01",
      "name": "[variables('frontDoorName')]",
      "location": "global",
      "sku": {
        "name": "[parameters('frontDoorSku')]"
      }
    },
    {
      "type": "Microsoft.Cdn/profiles/afdEndpoints",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', variables('frontDoorName'), variables('frontDoorApiEndpoint'))]",
      "location": "global",
      "properties": {
        "enabledState": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
      ]
    },
    {
      "type": "Microsoft.Cdn/profiles/originGroups",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', variables('frontDoorName'), 'api')]",
      "properties": {
        "loadBalancingSettings": {
          "sampleSize": 4,
          "successfulSamplesRequired": 3
        },
        "healthProbeSettings": {
          "probePath": "/",
          "probeRequestType": "HEAD",
          "probeProtocol": "Http",
          "probeIntervalInSeconds": 100
        },
        "sessionAffinityState": "Disabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
      ]
    },
    {
      "type": "Microsoft.Cdn/profiles/originGroups/origins",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}/{2}', variables('frontDoorName'), 'api', 'ApiManagement')]",
      "properties": {
        "hostName": "[reference(resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))).hostnameConfigurations[0].hostName]",
        "httpPort": 80,
        "httpsPort": 443,
        "originHostHeader": "[reference(resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))).hostnameConfigurations[0].hostName]",
        "priority": 1,
        "weight": 1000
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]",
        "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('frontDoorName'), 'api')]"
      ]
    },
    {
      "condition": "[not(empty(parameters('customDomainApimApi')))]",
      "type": "Microsoft.Cdn/profiles/customDomains",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', variables('frontDoorName'), replace(parameters('customDomainApimApi'), '.', '-'))]",
      "properties": {
        "hostName": "[parameters('customDomainApimApi')]",
        "tlsSettings": {
          "certificateType": "ManagedCertificate",
          "minimumTlsVersion": "TLS12"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
      ]
    },
    {
      "type": "Microsoft.Cdn/profiles/afdEndpoints/routes",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}/{2}', variables('frontDoorName'), variables('frontDoorApiEndpoint'), 'api-route')]",
      "properties": {
        "customDomains": [
          {
            "id": "[resourceId('Microsoft.Cdn/profiles/customDomains', variables('frontDoorName'), replace(parameters('customDomainApimApi'), '.', '-'))]"
          }
        ],
        "originGroup": {
          "id": "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('frontDoorName'), 'api')]"
        },
        "ruleSets": "[if(not(parameters('configureApiManagementDevPortal')), createArray(), createArray(createObject('id', resourceId('Microsoft.Cdn/profiles/ruleSets', variables('frontDoorName'), 'apimDevPortal'))))]",
        "supportedProtocols": [
          "Http",
          "Https"
        ],
        "patternsToMatch": [
          "/*"
        ],
        "forwardingProtocol": "HttpsOnly",
        "linkToDefaultDomain": "Enabled",
        "httpsRedirect": "Enabled",
        "enabledState": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles/customDomains', variables('frontDoorName'), replace(parameters('customDomainApimApi'), '.', '-'))]",
        "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorApiEndpoint'))]",
        "[resourceId('Microsoft.Cdn/profiles/originGroups/origins', variables('frontDoorName'), 'api', 'ApiManagement')]",
        "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('frontDoorName'), 'api')]",
        "[resourceId('Microsoft.Cdn/profiles/ruleSets', variables('frontDoorName'), 'apimDevPortal')]"
      ]
    },
    {
      "condition": "[parameters('configureApiManagementDevPortal')]",
      "type": "Microsoft.Cdn/profiles/ruleSets",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', variables('frontDoorName'), 'apimDevPortal')]",
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
      ]
    },
    {
      "condition": "[parameters('configureApiManagementDevPortal')]",
      "type": "Microsoft.Cdn/profiles/ruleSets/rules",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}/{2}', variables('frontDoorName'), 'apimDevPortal', 'DefaultHostCors')]",
      "properties": {
        "order": 1,
        "conditions": [
          {
            "name": "RequestHeader",
            "parameters": {
              "typeName": "DeliveryRuleRequestHeaderConditionParameters",
              "operator": "BeginsWith",
              "selector": "Referer",
              "negateCondition": false,
              "matchValues": [
                "[if(parameters('configureApiManagementDevPortal'), format('https://{0}', reference(resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorDevPortalEndpoint')), '2021-06-01').hostName), '')]"
              ],
              "transforms": [
                "Lowercase",
                "Trim"
              ]
            }
          },
          {
            "name": "RequestHeader",
            "parameters": {
              "typeName": "DeliveryRuleRequestHeaderConditionParameters",
              "operator": "Equal",
              "selector": "Origin",
              "negateCondition": false,
              "matchValues": [
                "null"
              ],
              "transforms": [
                "Lowercase",
                "Trim"
              ]
            }
          }
        ],
        "actions": [
          {
            "name": "ModifyRequestHeader",
            "parameters": {
              "typeName": "DeliveryRuleHeaderActionParameters",
              "headerAction": "Overwrite",
              "headerName": "Origin",
              "value": "[if(parameters('configureApiManagementDevPortal'), format('https://{0}', reference(resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorDevPortalEndpoint')), '2021-06-01').hostName), '')]"
            }
          },
          {
            "name": "ModifyResponseHeader",
            "parameters": {
              "typeName": "DeliveryRuleHeaderActionParameters",
              "headerAction": "Overwrite",
              "headerName": "Access-Control-Allow-Origin",
              "value": "null"
            }
          }
        ],
        "matchProcessingBehavior": "Continue"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorDevPortalEndpoint'))]",
        "[resourceId('Microsoft.Cdn/profiles/ruleSets', variables('frontDoorName'), 'apimDevPortal')]"
      ]
    },
    {
      "condition": "[and(parameters('configureApiManagementDevPortal'), not(empty(parameters('customDomainApimPortal'))))]",
      "type": "Microsoft.Cdn/profiles/ruleSets/rules",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}/{2}', variables('frontDoorName'), 'apimDevPortal', 'CustomDomainCors')]",
      "properties": {
        "order": 2,
        "conditions": [
          {
            "name": "RequestHeader",
            "parameters": {
              "typeName": "DeliveryRuleRequestHeaderConditionParameters",
              "operator": "BeginsWith",
              "selector": "Referer",
              "negateCondition": false,
              "matchValues": [
                "[format('https://{0}', parameters('customDomainApimPortal'))]"
              ],
              "transforms": [
                "Lowercase",
                "Trim"
              ]
            }
          },
          {
            "name": "RequestHeader",
            "parameters": {
              "typeName": "DeliveryRuleRequestHeaderConditionParameters",
              "operator": "Equal",
              "selector": "Origin",
              "negateCondition": false,
              "matchValues": [
                "null"
              ],
              "transforms": [
                "Lowercase",
                "Trim"
              ]
            }
          }
        ],
        "actions": [
          {
            "name": "ModifyRequestHeader",
            "parameters": {
              "typeName": "DeliveryRuleHeaderActionParameters",
              "headerAction": "Overwrite",
              "headerName": "Origin",
              "value": "[format('https://{0}', parameters('customDomainApimPortal'))]"
            }
          },
          {
            "name": "ModifyResponseHeader",
            "parameters": {
              "typeName": "DeliveryRuleHeaderActionParameters",
              "headerAction": "Overwrite",
              "headerName": "Access-Control-Allow-Origin",
              "value": "null"
            }
          }
        ],
        "matchProcessingBehavior": "Continue"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles/ruleSets', variables('frontDoorName'), 'apimDevPortal')]"
      ]
    },
    {
      "condition": "[parameters('configureApiManagementDevPortal')]",
      "type": "Microsoft.Cdn/profiles/afdEndpoints",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', variables('frontDoorName'), variables('frontDoorDevPortalEndpoint'))]",
      "location": "global",
      "properties": {
        "enabledState": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
      ]
    },
    {
      "condition": "[parameters('configureApiManagementDevPortal')]",
      "type": "Microsoft.Cdn/profiles/originGroups",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', variables('frontDoorName'), 'developer-portal')]",
      "properties": {
        "loadBalancingSettings": {
          "sampleSize": 4,
          "successfulSamplesRequired": 3
        },
        "healthProbeSettings": {
          "probePath": "/",
          "probeRequestType": "HEAD",
          "probeProtocol": "Http",
          "probeIntervalInSeconds": 100
        },
        "sessionAffinityState": "Disabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
      ]
    },
    {
      "condition": "[parameters('configureApiManagementDevPortal')]",
      "type": "Microsoft.Cdn/profiles/originGroups/origins",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}/{2}', variables('frontDoorName'), 'developer-portal', 'DeveloperPortal')]",
      "properties": {
        "hostName": "[replace(reference(resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))).developerPortalUrl, 'https://', '')]",
        "httpPort": 80,
        "httpsPort": 443,
        "originHostHeader": "[replace(reference(resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))).developerPortalUrl, 'https://', '')]",
        "priority": 1,
        "weight": 1000
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]",
        "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('frontDoorName'), 'developer-portal')]"
      ]
    },
    {
      "condition": "[and(parameters('configureApiManagementDevPortal'), not(empty(parameters('customDomainApimPortal'))))]",
      "type": "Microsoft.Cdn/profiles/customDomains",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', variables('frontDoorName'), replace(parameters('customDomainApimPortal'), '.', '-'))]",
      "properties": {
        "hostName": "[parameters('customDomainApimPortal')]",
        "tlsSettings": {
          "certificateType": "ManagedCertificate",
          "minimumTlsVersion": "TLS12"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]"
      ]
    },
    {
      "condition": "[parameters('configureApiManagementDevPortal')]",
      "type": "Microsoft.Cdn/profiles/afdEndpoints/routes",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}/{2}', variables('frontDoorName'), variables('frontDoorDevPortalEndpoint'), 'developer-portal-route')]",
      "properties": {
        "customDomains": [
          {
            "id": "[resourceId('Microsoft.Cdn/profiles/customDomains', variables('frontDoorName'), replace(parameters('customDomainApimPortal'), '.', '-'))]"
          }
        ],
        "originGroup": {
          "id": "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('frontDoorName'), 'developer-portal')]"
        },
        "supportedProtocols": [
          "Http",
          "Https"
        ],
        "patternsToMatch": [
          "/*"
        ],
        "forwardingProtocol": "HttpsOnly",
        "linkToDefaultDomain": "Enabled",
        "httpsRedirect": "Enabled",
        "enabledState": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles/customDomains', variables('frontDoorName'), replace(parameters('customDomainApimPortal'), '.', '-'))]",
        "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorDevPortalEndpoint'))]",
        "[resourceId('Microsoft.Cdn/profiles/originGroups/origins', variables('frontDoorName'), 'developer-portal', 'DeveloperPortal')]",
        "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('frontDoorName'), 'developer-portal')]"
      ]
    },
    {
      "type": "Microsoft.Network/FrontDoorWebApplicationFirewallPolicies",
      "apiVersion": "2020-11-01",
      "name": "[variables('frontDoorWafName')]",
      "location": "global",
      "sku": {
        "name": "[parameters('frontDoorSku')]"
      },
      "properties": {
        "policySettings": {
          "enabledState": "Enabled",
          "mode": "Detection"
        },
        "managedRules": {
          "managedRuleSets": []
        }
      }
    },
    {
      "type": "Microsoft.Cdn/profiles/securityPolicies",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', variables('frontDoorName'), 'waf-policy')]",
      "properties": {
        "parameters": {
          "type": "WebApplicationFirewall",
          "wafPolicy": {
            "id": "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', variables('frontDoorWafName'))]"
          },
          "associations": [
            {
              "domains": "[union(if(not(parameters('configureApiManagementDevPortal')), createArray(), createArray(createObject('id', resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorDevPortalEndpoint'))))), createArray(createObject('id', resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorApiEndpoint')))))]",
              "patternsToMatch": [
                "/*"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorApiEndpoint'))]",
        "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorDevPortalEndpoint'))]",
        "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]",
        "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', variables('frontDoorWafName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Cdn/profiles/{0}', variables('frontDoorName'))]",
      "name": "LogAnalytics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]",
        "logs": [
          {
            "category": "FrontDoorAccessLog",
            "enabled": true
          },
          {
            "category": "FrontDoorHealthProbeLog",
            "enabled": true
          },
          {
            "category": "FrontDoorWebApplicationFirewallLog",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('frontDoorName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      ]
    }
  ],
  "outputs": {
    "keyVaultName": {
      "type": "string",
      "value": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
    },
    "apiManagementId": {
      "type": "string",
      "value": "[resourceId('Microsoft.ApiManagement/service', variables('apiMgmtName'))]"
    },
    "frontDoorApiEndpointHostName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorApiEndpoint'))).hostName]"
    },
    "frontDoorApiDnsTxtRecordName": {
      "type": "string",
      "value": "[format('_dnsauth.{0}', reference(resourceId('Microsoft.Cdn/profiles/customDomains', variables('frontDoorName'), replace(parameters('customDomainApimApi'), '.', '-')), '2021-06-01').hostName)]"
    },
    "frontDoorApiDnsTxtRecordValue": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Cdn/profiles/customDomains', variables('frontDoorName'), replace(parameters('customDomainApimApi'), '.', '-')), '2021-06-01').validationProperties.validationToken]"
    },
    "frontDoorApiDnsExpiry": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Cdn/profiles/customDomains', variables('frontDoorName'), replace(parameters('customDomainApimApi'), '.', '-')), '2021-06-01').validationProperties.expirationDate]"
    },
    "frontDoorDeveloperPortalEndpointHostName": {
      "type": "string",
      "value": "[if(parameters('configureApiManagementDevPortal'), reference(resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('frontDoorName'), variables('frontDoorDevPortalEndpoint')), '2021-06-01').hostName, '')]"
    },
    "frontDoorDeveloperPortalDnsTxtRecordName": {
      "type": "string",
      "value": "[if(parameters('configureApiManagementDevPortal'), format('_dnsauth.{0}', reference(resourceId('Microsoft.Cdn/profiles/customDomains', variables('frontDoorName'), replace(parameters('customDomainApimPortal'), '.', '-')), '2021-06-01').hostName), '')]"
    },
    "frontDoorDeveloperPortalDnsTxtRecordValue": {
      "type": "string",
      "value": "[if(parameters('configureApiManagementDevPortal'), reference(resourceId('Microsoft.Cdn/profiles/customDomains', variables('frontDoorName'), replace(parameters('customDomainApimPortal'), '.', '-')), '2021-06-01').validationProperties.validationToken, '')]"
    },
    "frontDoorDeveloperPortalDnsExpiry": {
      "type": "string",
      "value": "[if(parameters('configureApiManagementDevPortal'), reference(resourceId('Microsoft.Cdn/profiles/customDomains', variables('frontDoorName'), replace(parameters('customDomainApimPortal'), '.', '-')), '2021-06-01').validationProperties.expirationDate, '')]"
    }
  }
}