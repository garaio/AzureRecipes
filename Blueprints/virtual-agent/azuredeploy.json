{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.613.9944",
      "templateHash": "2322317819917232856"
    }
  },
  "parameters": {
    "resourceNamePrefix": {
      "type": "string",
      "defaultValue": "customer-project",
      "metadata": {
        "description": "The prefix will be used for every parameter that represents a resource name. See the description of the parameter."
      }
    },
    "resourceNameSuffix": {
      "type": "string",
      "metadata": {
        "description": "The suffix will be appended to every parameter that represents a resource name. See the description of the parameter."
      }
    },
    "botSku": {
      "type": "string",
      "defaultValue": "F0",
      "allowedValues": [
        "F0",
        "S1"
      ]
    },
    "botAppId": {
      "type": "string",
      "metadata": {
        "description": "Client ID of the App Registration"
      }
    },
    "botAppSecret": {
      "type": "secureString",
      "metadata": {
        "description": "Client secret of the App Registration"
      }
    },
    "botDisplayName": {
      "type": "string",
      "defaultValue": "GARAIO-Blueprint",
      "metadata": {
        "description": "Name displayed in the chat window"
      }
    },
    "luisAppId": {
      "type": "string",
      "metadata": {
        "description": "ID of the LUIS application (empty on initial deployment)"
      }
    },
    "luisSku": {
      "type": "string",
      "defaultValue": "F0",
      "allowedValues": [
        "F0",
        "S0"
      ]
    },
    "luisLocation": {
      "type": "string",
      "defaultValue": "westeurope",
      "allowedValues": [
        "westus",
        "westeurope"
      ]
    },
    "qnaApiKey": {
      "type": "secureString",
      "metadata": {
        "description": "API key to manage and edit knowledge base with indexer function, displayed on https://www.qnamaker.ai/UserSettings (empty on initial deployment)"
      }
    },
    "qnaKnowledgebaseId": {
      "type": "string",
      "metadata": {
        "description": "ID of the QnA Maker knowledge base (empty on initial deployment)"
      }
    },
    "qnaMakerLocation": {
      "type": "string",
      "defaultValue": "northeurope",
      "allowedValues": [
        "westus",
        "southcentralus",
        "northeurope"
      ]
    },
    "qnaMakerSku": {
      "type": "string",
      "defaultValue": "F0",
      "allowedValues": [
        "F0",
        "S0"
      ]
    },
    "qnaSearchSku": {
      "type": "string",
      "defaultValue": "free",
      "allowedValues": [
        "free",
        "basic",
        "standard"
      ]
    },
    "textAnalyticsSku": {
      "type": "string",
      "defaultValue": "F0",
      "allowedValues": [
        "F0",
        "S",
        "S0",
        "S1",
        "S2",
        "S3",
        "S4"
      ]
    }
  },
  "functions": [],
  "variables": {
    "logAnalyticsWsName": "[format('{0}-law-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "appInsightsName": "[format('{0}-ai-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "keyVaultName": "[format('{0}-kv-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "keyVaultSecretStorageAccountConnectionString": "storageAccountConnectionString",
    "keyVaultSecretCosmosDbConnectionString": "cosmosDbConnectionString",
    "keyVaultSecretBotAppSecret": "botAppSecret",
    "blobContainerConfig": "config",
    "blobContainerDeployment": "deployment",
    "blobContainerQnaData": "qna",
    "storageAccountName": "[replace(format('{0}-sa-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix')), '-', '')]",
    "storageAccountBlobs": [
      {
        "name": "[variables('blobContainerConfig')]",
        "publicAccess": "None"
      },
      {
        "name": "[variables('blobContainerDeployment')]",
        "publicAccess": "None"
      },
      {
        "name": "[variables('blobContainerQnaData')]",
        "publicAccess": "None"
      }
    ],
    "storageAccountBlobUri": "[format('https://{0}.blob.core.windows.net/', variables('storageAccountName'))]",
    "storageAccountFunctionSasParams": {
      "signedServices": "b",
      "signedResourceTypes": "o",
      "signedPermission": "r",
      "signedExpiry": "2050-01-01T00:00:00Z"
    },
    "appServicePlanName": "[format('{0}-asp-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "appServicePlanSku": {
      "name": "B1",
      "tier": "Basic",
      "size": "B1",
      "family": "B",
      "capacity": 1
    },
    "indexerFuncName": "[format('{0}-indexer-f-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "indexerFuncPackagePath": "/Customer.Project.IndexerFuncApp.zip",
    "indexerFuncJobsSchedule": "0 30 0 * * 1-5",
    "botName": "[format('{0}-wab-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "botSiteName": "[format('{0}-wab-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "botEndpoint": "[format('https://{0}.azurewebsites.net/api/messages', variables('botSiteName'))]",
    "cosmosDbAccountName": "[format('{0}-cdb-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "textAnalyticsName": "[format('{0}-ta-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "textAnalyticsEndpointHostName": "[format('https://{0}.api.cognitive.microsoft.com', resourceGroup().location)]",
    "luisPredictionName": "[format('{0}-luis-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "luisAuthoringName": "[format('{0}-luis-auth-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "luisEndpointHostName": "[format('https://{0}.api.cognitive.microsoft.com', parameters('luisLocation'))]",
    "qnaMakerName": "[format('{0}-qna-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "qnaSearchName": "[format('{0}-qna-cs-{1}', parameters('resourceNamePrefix'), parameters('resourceNameSuffix'))]",
    "qnaEndpointHostName": "[format('https://{0}.cognitiveservices.azure.com/qnamaker/v5.0-preview.1', variables('qnaMakerName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "pid-d16e7b59-716a-407d-96db-18d1cac40407",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "copy": {
        "name": "storageAccountBlobContainerRes",
        "count": "[length(variables('storageAccountBlobs'))]"
      },
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountBlobs')[copyIndex()].name)]",
      "properties": {
        "publicAccess": "[variables('storageAccountBlobs')[copyIndex()].publicAccess]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "name": "[variables('logAnalyticsWsName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "name": "[variables('appInsightsName')]",
      "location": "[resourceGroup().location]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[variables('keyVaultName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForTemplateDeployment": true,
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyVaultName'))]",
      "name": "LogAnalytics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]",
        "logs": [
          {
            "category": "AuditEvent",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('keyVaultSecretStorageAccountConnectionString'))]",
      "properties": {
        "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('keyVaultSecretCosmosDbConnectionString'))]",
      "properties": {
        "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName')), '2020-04-01').connectionStrings[0].connectionString]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('keyVaultSecretBotAppSecret'))]",
      "properties": {
        "value": "[parameters('botAppSecret')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2019-09-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'add')]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('botSiteName')), '2020-09-01', 'Full').identity.principalId]",
            "permissions": {
              "keys": [
                "get"
              ],
              "secrets": [
                "get"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('indexerFuncName')), '2020-09-01', 'Full').identity.principalId]",
            "permissions": {
              "keys": [
                "get"
              ],
              "secrets": [
                "get"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('botSiteName'))]",
        "[resourceId('Microsoft.Web/sites', variables('indexerFuncName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2021-03-15",
      "name": "[variables('cosmosDbAccountName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "defaultExperience": "Core (SQL)"
      },
      "kind": "GlobalDocumentDB",
      "properties": {
        "publicNetworkAccess": "Enabled",
        "enableAutomaticFailover": false,
        "enableMultipleWriteLocations": false,
        "enableFreeTier": false,
        "enableAnalyticalStorage": false,
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "locations": [
          {
            "locationName": "[resourceGroup().location]",
            "failoverPriority": 0,
            "isZoneRedundant": false
          }
        ],
        "capabilities": [
          {
            "name": "EnableServerless"
          }
        ],
        "backupPolicy": {
          "type": "Periodic",
          "periodicModeProperties": {
            "backupIntervalInMinutes": 240,
            "backupRetentionIntervalInHours": 8
          }
        }
      }
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', variables('cosmosDbAccountName'))]",
      "name": "LogAnalytics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]",
        "logs": [
          {
            "category": "QueryRuntimeStatistics",
            "enabled": true
          },
          {
            "category": "PartitionKeyStatistics",
            "enabled": true
          },
          {
            "category": "PartitionKeyRUConsumption",
            "enabled": true
          },
          {
            "category": "ControlPlaneRequests",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "Requests",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWsName'))]"
      ]
    },
    {
      "type": "Microsoft.BotService/botServices",
      "apiVersion": "2021-03-01",
      "name": "[variables('botName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[parameters('botSku')]"
      },
      "kind": "sdk",
      "properties": {
        "displayName": "[parameters('botDisplayName')]",
        "endpoint": "[variables('botEndpoint')]",
        "msaAppId": "[parameters('botAppId')]",
        "developerAppInsightsApplicationId": "[variables('appInsightsName')]",
        "developerAppInsightKey": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Web/sites', variables('botSiteName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2020-09-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[resourceGroup().location]",
      "sku": "[variables('appServicePlanSku')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-09-01",
      "name": "[variables('botSiteName')]",
      "location": "[resourceGroup().location]",
      "kind": "app",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "cors": {
            "allowedOrigins": [
              "https://botservice.hosting.portal.azure.net",
              "https://botservice-ms.hosting.portal.azure.net",
              "https://hosting.onecloud.azure-test.net/"
            ]
          },
          "alwaysOn": true
        }
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2020-09-01",
      "name": "[format('{0}/{1}', variables('botSiteName'), 'appsettings')]",
      "properties": {
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]",
        "WEBSITE_NODE_DEFAULT_VERSION": "10.14.1",
        "MicrosoftAppId": "[parameters('botAppId')]",
        "MicrosoftAppPassword": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('keyVaultSecretBotAppSecret'))]",
        "BotDisplayName": "[parameters('botDisplayName')]",
        "StorageConnectionString": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('keyVaultSecretStorageAccountConnectionString'))]",
        "CosmosDbConnectionString": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('keyVaultSecretCosmosDbConnectionString'))]",
        "StorageQnaDataContainerName": "[variables('blobContainerQnaData')]",
        "LuisApiKeyDe": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('luisPredictionName')), '2017-04-18').key1]",
        "LuisAppIdDe": "[parameters('luisAppId')]",
        "LuisEndpointHostNameDe": "[variables('luisEndpointHostName')]",
        "QnaKnowledgebaseId": "[parameters('qnaKnowledgebaseId')]",
        "QnaApiKey": "[parameters('qnaApiKey')]",
        "QnaEndpointHostName": "[variables('qnaEndpointHostName')]",
        "TextAnalyticsApiKey": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('textAnalyticsName')), '2017-04-18').key1]",
        "TextAnalyticsEndpointHostName": "[variables('textAnalyticsEndpointHostName')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Web/sites', variables('botSiteName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultSecretBotAppSecret'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultSecretCosmosDbConnectionString'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultSecretStorageAccountConnectionString'))]",
        "[resourceId('Microsoft.CognitiveServices/accounts', variables('luisPredictionName'))]",
        "[resourceId('Microsoft.CognitiveServices/accounts', variables('textAnalyticsName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-09-01",
      "name": "[variables('indexerFuncName')]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[format('{0}.azurewebsites.net', variables('indexerFuncName'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[format('{0}.scm.azurewebsites.net', variables('indexerFuncName'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "clientAffinityEnabled": true,
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2020-09-01",
      "name": "[format('{0}/{1}', variables('indexerFuncName'), 'appsettings')]",
      "properties": {
        "AzureWebJobsStorage": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('keyVaultSecretStorageAccountConnectionString'))]",
        "AzureWebJobsDisableHomepage": "true",
        "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]",
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]",
        "FUNCTIONS_EXTENSION_VERSION": "~3",
        "FUNCTIONS_WORKER_RUNTIME": "dotnet",
        "WEBSITE_TIME_ZONE": "W. Europe Standard Time",
        "WEBSITE_RUN_FROM_PACKAGE": "[format('{0}{1}{2}?{3}', variables('storageAccountBlobUri'), variables('blobContainerDeployment'), variables('indexerFuncPackagePath'), listAccountSas(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01', variables('storageAccountFunctionSasParams')).accountSasToken)]",
        "WEBSITE_CONTENTSHARE": "[variables('indexerFuncName')]",
        "StorageConnectionString": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('keyVaultSecretStorageAccountConnectionString'))]",
        "ConfigContainerName": "[variables('blobContainerConfig')]",
        "QnaDataContainerName": "[variables('blobContainerQnaData')]",
        "QnaSubscriptionKey": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('qnaMakerName')), '2017-04-18').key1]",
        "QnaKnowledgebaseId": "[parameters('qnaKnowledgebaseId')]",
        "JobsSchedule": "[variables('indexerFuncJobsSchedule')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Web/sites', variables('indexerFuncName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultSecretStorageAccountConnectionString'))]",
        "[resourceId('Microsoft.CognitiveServices/accounts', variables('qnaMakerName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "2015-08-19",
      "name": "[variables('qnaSearchName')]",
      "location": "[parameters('qnaMakerLocation')]",
      "properties": {
        "replicaCount": 1,
        "partitionCount": 1,
        "hostingMode": "default"
      },
      "sku": {
        "name": "[parameters('qnaSearchSku')]"
      }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2017-04-18",
      "name": "[variables('qnaMakerName')]",
      "kind": "QnAMaker.v2",
      "location": "[parameters('qnaMakerLocation')]",
      "sku": {
        "name": "[parameters('qnaMakerSku')]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "apiProperties": {
          "qnaAzureSearchEndpointId": "[resourceId('Microsoft.Search/searchServices', variables('qnaSearchName'))]",
          "qnaAzureSearchEndpointKey": "[listadminkeys(resourceId('Microsoft.Search/searchServices', variables('qnaSearchName')), '2015-08-19').primaryKey]"
        },
        "customSubDomainName": "[variables('qnaMakerName')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Search/searchServices', variables('qnaSearchName'))]"
      ]
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2017-04-18",
      "name": "[variables('luisPredictionName')]",
      "kind": "LUIS",
      "location": "[parameters('luisLocation')]",
      "sku": {
        "name": "[parameters('luisSku')]"
      },
      "properties": {}
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2017-04-18",
      "name": "[variables('luisAuthoringName')]",
      "location": "[parameters('luisLocation')]",
      "sku": {
        "name": "F0"
      },
      "kind": "LUIS.Authoring",
      "properties": {}
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2017-04-18",
      "name": "[variables('textAnalyticsName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[parameters('textAnalyticsSku')]"
      },
      "kind": "TextAnalytics",
      "properties": {}
    }
  ]
}